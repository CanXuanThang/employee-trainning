{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thang\\\\Downloads\\\\Code structure\\\\src\\\\modules\\\\auth\\\\pages\\\\employeeManagement\\\\layouts\\\\table\\\\Rows.tsx\",\n    _s = $RefreshSig$();\n\nimport { Checkbox, TableCell, TableRow } from '@mui/material';\nimport React from 'react';\nimport { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { push } from 'connected-react-router';\nimport { ROUTES } from '../../../../../../configs/routes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Rows(props) {\n  _s();\n\n  const {\n    checked,\n    columns,\n    row,\n    listCheck\n  } = props;\n  const [isChecked, setIsChecked] = useState(checked);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    setIsChecked(checked);\n  }, [checked]);\n\n  const handleCheck = event => {\n    setIsChecked(event.target.checked);\n    const {\n      name,\n      checked\n    } = event.target;\n\n    if (checked) {\n      listCheck(prev => [...prev, Number(name)]);\n    } else {\n      listCheck(prevNames => prevNames.filter(prevName => prevName !== Number(name)));\n    }\n  };\n\n  const handleChecked = () => {\n    setIsChecked(!isChecked);\n  };\n\n  const handleDoubleClick = row => {\n    dispatch(push(ROUTES.update(row.id)));\n  };\n\n  return /*#__PURE__*/_jsxDEV(TableRow, {\n    hover: true,\n    role: \"checkbox\",\n    tabIndex: -1,\n    onClick: handleChecked,\n    onDoubleClick: () => handleDoubleClick(row),\n    sx: {\n      backgroundColor: isChecked ? 'rgb(233, 249, 238)' : 'rgb(248, 249, 250)'\n    },\n    children: [/*#__PURE__*/_jsxDEV(TableCell, {\n      children: /*#__PURE__*/_jsxDEV(Checkbox, {\n        checked: isChecked,\n        name: String(row.id),\n        onChange: handleCheck,\n        color: \"success\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), columns.map(column => {\n      const value = row[column.id];\n\n      if (column.id === 'home_address') {\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            children: value.home_address_1\n          }, `${column.id}_1`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: value.home_address_2\n          }, `${column.id}_2`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }, this)]\n        }, column.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(TableCell, {\n          children: value\n        }, column.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 18\n        }, this);\n      }\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Rows, \"T8unHnR80jM4vAKeREZsmiCuC0A=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Rows;\nexport default Rows;\n\nvar _c;\n\n$RefreshReg$(_c, \"Rows\");","map":{"version":3,"sources":["C:/Users/thang/Downloads/Code structure/src/modules/auth/pages/employeeManagement/layouts/table/Rows.tsx"],"names":["Checkbox","TableCell","TableRow","React","useEffect","useState","useDispatch","push","ROUTES","Rows","props","checked","columns","row","listCheck","isChecked","setIsChecked","dispatch","handleCheck","event","target","name","prev","Number","prevNames","filter","prevName","handleChecked","handleDoubleClick","update","id","backgroundColor","String","map","column","value","home_address_1","home_address_2"],"mappings":"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","sourcesContent":["import { Checkbox, TableCell, TableRow } from '@mui/material';\r\nimport React from 'react';\r\nimport { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport { AppState } from '../../../../../../redux/reducer';\r\nimport { Action } from 'typesafe-actions';\r\nimport { setIdUpdate } from '../../../../redux/employeeReducer';\r\nimport { push } from 'connected-react-router';\r\nimport { ROUTES } from '../../../../../../configs/routes';\r\n\r\ninterface Props {\r\n  checked: boolean;\r\n  columns: any;\r\n  row: any;\r\n  listCheck: any;\r\n}\r\n\r\nfunction Rows(props: Props) {\r\n  const { checked, columns, row, listCheck } = props;\r\n  const [isChecked, setIsChecked] = useState<boolean>(checked);\r\n  const dispatch = useDispatch<ThunkDispatch<AppState, null, Action<string>>>();\r\n\r\n  useEffect(() => {\r\n    setIsChecked(checked);\r\n  }, [checked]);\r\n\r\n  const handleCheck = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setIsChecked(event.target.checked);\r\n    const { name, checked } = event.target;\r\n    if (checked) {\r\n      listCheck((prev: any) => [...prev, Number(name)]);\r\n    } else {\r\n      listCheck((prevNames: any) => prevNames.filter((prevName: any) => prevName !== Number(name)));\r\n    }\r\n  };\r\n\r\n  const handleChecked = () => {\r\n    setIsChecked(!isChecked);\r\n  };\r\n\r\n  const handleDoubleClick = (row: any) => {\r\n    dispatch(push(ROUTES.update(row.id)));\r\n  };\r\n\r\n  return (\r\n    <TableRow\r\n      hover\r\n      role=\"checkbox\"\r\n      tabIndex={-1}\r\n      onClick={handleChecked}\r\n      onDoubleClick={() => handleDoubleClick(row)}\r\n      sx={{ backgroundColor: isChecked ? 'rgb(233, 249, 238)' : 'rgb(248, 249, 250)' }}\r\n    >\r\n      <TableCell>\r\n        <Checkbox checked={isChecked} name={String(row.id)} onChange={handleCheck} color=\"success\" />\r\n      </TableCell>\r\n      {columns.map((column: any) => {\r\n        const value = row[column.id];\r\n\r\n        if (column.id === 'home_address') {\r\n          return (\r\n            <React.Fragment key={column.id}>\r\n              <TableCell key={`${column.id}_1`}>{value.home_address_1}</TableCell>\r\n              <TableCell key={`${column.id}_2`}>{value.home_address_2}</TableCell>\r\n            </React.Fragment>\r\n          );\r\n        } else {\r\n          return <TableCell key={column.id}>{value}</TableCell>;\r\n        }\r\n      })}\r\n    </TableRow>\r\n  );\r\n}\r\n\r\nexport default Rows;\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"const validateEmail = username => {\n  if (!username) {\n    return 'usernameRequire';\n  }\n\n  return '';\n};\n\nconst validatePassword = password => {\n  if (!password) {\n    return 'passwordRequire';\n  }\n\n  if (password.length < 4) {\n    return 'minPasswordInvalid';\n  }\n\n  return '';\n};\n\nconst validateFactory = factory => {\n  if (!factory) {\n    return 'factoryRequire';\n  }\n\n  return '';\n};\n\nconst validateRepeatPassword = (password, repeatPassword) => {\n  if (!repeatPassword) {\n    return 'passwordRequire';\n  }\n\n  if (password.length < 8 && password.length > 16) {\n    return 'minPasswordInvalid';\n  }\n\n  if (password !== repeatPassword) {\n    return 'matchPasswordInvalid';\n  }\n\n  return '';\n};\n\nconst validateField = (field, value) => {\n  if (value) return '';\n  let fieldRequire = '';\n\n  switch (field) {\n    case 'name':\n      fieldRequire = 'nameRequire';\n      break;\n\n    case 'gender':\n      fieldRequire = 'genderRequire';\n      break;\n\n    case 'region':\n      fieldRequire = 'regionRequire';\n      break;\n\n    case 'state':\n      fieldRequire = 'stateRequire';\n      break;\n  }\n\n  return fieldRequire;\n};\n\nexport const validateLogin = values => {\n  return {\n    username: validateEmail(values.username),\n    password: validatePassword(values.password),\n    factory: validateFactory(Number(values.company_id))\n  };\n};\nexport const validLogin = values => {\n  return !values.username && !values.password;\n};\nexport const validateSignUp = values => {\n  return {\n    email: validateEmail(values.email),\n    password: validatePassword(values.password),\n    repeatPassword: validateRepeatPassword(values.password, values.repeatPassword),\n    name: validateField('name', values.name),\n    gender: validateField('gender', values.gender),\n    region: validateField('region', values.region),\n    state: validateField('state', values.state)\n  };\n};\nexport const validSignUp = values => {\n  return !values.email && !values.password && !values.repeatPassword && !values.name && !values.gender && !values.region && !values.state;\n};\n\nconst validateFieldAddEmployee = (field, value) => {\n  if (value) return '';\n  let fieldRequire = '';\n\n  switch (field) {\n    case 'gender':\n      fieldRequire = 'genderRequire';\n      break;\n\n    case 'ktp':\n      fieldRequire = 'ktpRequire';\n      break;\n\n    case 'nc_id':\n      fieldRequire = 'ncIdRequire';\n      break;\n\n    case 'type':\n      fieldRequire = 'type';\n      break;\n  }\n\n  return fieldRequire;\n};\n\nconst validateName = name => {\n  if (!name) {\n    return 'nameRequire';\n  }\n\n  if (name.length > 50) {\n    return 'maxximumValid50';\n  }\n\n  return '';\n};\n\nconst validateGender = gender => {\n  if (gender === '') {\n    return 'genderRequire';\n  }\n};\n\nconst validateKtp = ktp_no => {\n  if (!ktp_no) {\n    return 'ktpRequire';\n  }\n\n  if (ktp_no.length > 20) {\n    return 'maxximumValid20';\n  }\n\n  return '';\n};\n\nconst validateNcId = ncId => {\n  if (!ncId) {\n    return 'ncIdRequire';\n  }\n\n  if (ncId.length > 20) {\n    return 'maxximumValid20';\n  }\n\n  return '';\n};\n\nconst validateFieldMother = mother_name => {\n  if (mother_name && mother_name.length > 50) {\n    return 'maxximumValid50';\n  }\n\n  return '';\n};\n\nconst validateFieldPob = pob => {\n  if (pob && pob.length > 50) {\n    return 'maxximumValid50';\n  }\n\n  return '';\n};\n\nconst validateFieldAddress1 = home_address_1 => {\n  if (home_address_1 && home_address_1.length > 100) {\n    return 'maxximumValid100';\n  }\n\n  return '';\n};\n\nconst validateFieldAddress2 = home_address_2 => {\n  if (home_address_2 && home_address_2.length > 100) {\n    return 'maxximumValid100';\n  }\n\n  return '';\n};\n\nconst validateFieldMobileNo = mobile_no => {\n  if (mobile_no && mobile_no.length > 20) {\n    return 'maxximumValid20';\n  }\n\n  return '';\n};\n\nconst validateFieldTelNo = tel_no => {\n  if (tel_no && tel_no.length > 20) {\n    return 'maxximumValid20';\n  }\n\n  return '';\n};\n\nconst validateFieldBankCardNo = card_number => {\n  if (card_number && card_number.length > 30) {\n    return 'maxximumValid30';\n  }\n\n  return '';\n};\n\nconst validateFieldBankAccountNo = bank_account_no => {\n  if (bank_account_no && bank_account_no.length > 30) {\n    return 'maxximumValid30';\n  }\n\n  return '';\n};\n\nconst validateFieldBankName = bank_name => {\n  if (bank_name && bank_name.length > 100) {\n    return 'maxximumValid100';\n  }\n\n  return '';\n};\n\nconst validateFieldFamilyCardName = family_card_number => {\n  if (family_card_number && family_card_number.length > 30) {\n    return 'maxximumValid30';\n  }\n\n  return '';\n};\n\nconst validateFieldSafetyInsuranceNo = safety_insurance_no => {\n  if (safety_insurance_no && safety_insurance_no.length > 30) {\n    return 'maxximumValid30';\n  }\n\n  return '';\n};\n\nconst validateFieldHealthInsuranceNo = health_insurance_no => {\n  if (health_insurance_no && health_insurance_no.length > 30) {\n    return 'maxximumValid30';\n  }\n\n  return '';\n};\n\nexport const validateAddEmployee = values => {\n  return {\n    name: validateName(values.name),\n    gender: validateGender(values.gender),\n    mother_name: validateFieldMother(values.mother_name),\n    pob: validateFieldPob(values.pob),\n    ktp_no: validateKtp(values.ktp_no),\n    nc_id: validateNcId(values.nc_id),\n    home_address_1: validateFieldAddress1(values.home_address_1),\n    home_address_2: validateFieldAddress2(values.home_address_2),\n    mobile_no: validateFieldMobileNo(values.mobile_no),\n    tel_no: validateFieldTelNo(values.tel_no),\n    bank_account_no: validateFieldBankAccountNo(values.bank_account_no),\n    card_number: validateFieldBankCardNo(values.card_number),\n    bank_name: validateFieldBankName(values.bank_name),\n    family_card_number: validateFieldFamilyCardName(values.family_card_number),\n    safety_insurance_no: validateFieldSafetyInsuranceNo(values.safety_insurance_no),\n    health_insurance_no: validateFieldHealthInsuranceNo(values.safety_insurance_no),\n    type: validateFieldAddEmployee('type', values.type)\n  };\n};\nexport const validAddEmployee = values => {\n  return !values.gender && !values.mother_name && !values.pob && !values.ktp_no && !values.name && !values.nc_id && !values.home_address_1 && !values.home_address_2 && !values.mobile_no && !values.tel_no && !values.bank_account_no && !values.card_number && !values.bank_name && !values.family_card_number && !values.safety_insurance_no && !values.health_insurance_no && !values.type;\n};","map":{"version":3,"sources":["C:/Users/thang/Downloads/Code structure/src/modules/auth/utils.ts"],"names":["validateEmail","username","validatePassword","password","length","validateFactory","factory","validateRepeatPassword","repeatPassword","validateField","field","value","fieldRequire","validateLogin","values","Number","company_id","validLogin","validateSignUp","email","name","gender","region","state","validSignUp","validateFieldAddEmployee","validateName","validateGender","validateKtp","ktp_no","validateNcId","ncId","validateFieldMother","mother_name","validateFieldPob","pob","validateFieldAddress1","home_address_1","validateFieldAddress2","home_address_2","validateFieldMobileNo","mobile_no","validateFieldTelNo","tel_no","validateFieldBankCardNo","card_number","validateFieldBankAccountNo","bank_account_no","validateFieldBankName","bank_name","validateFieldFamilyCardName","family_card_number","validateFieldSafetyInsuranceNo","safety_insurance_no","validateFieldHealthInsuranceNo","health_insurance_no","validateAddEmployee","nc_id","type","validAddEmployee"],"mappings":"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","sourcesContent":["import { ILoginParams, ILoginValidation } from '../../models/auth';\nimport { EmployeeParams, EmployeeValidate } from '../../models/employee';\nimport { ISignUpParams, ISignUpValidation } from '../../models/singup';\n\nconst validateEmail = (username: string) => {\n  if (!username) {\n    return 'usernameRequire';\n  }\n\n  return '';\n};\n\nconst validatePassword = (password: string) => {\n  if (!password) {\n    return 'passwordRequire';\n  }\n\n  if (password.length < 4) {\n    return 'minPasswordInvalid';\n  }\n\n  return '';\n};\n\nconst validateFactory = (factory: number) => {\n  if (!factory) {\n    return 'factoryRequire';\n  }\n  return '';\n};\n\nconst validateRepeatPassword = (password: string, repeatPassword: string) => {\n  if (!repeatPassword) {\n    return 'passwordRequire';\n  }\n\n  if (password.length < 8 && password.length > 16) {\n    return 'minPasswordInvalid';\n  }\n\n  if (password !== repeatPassword) {\n    return 'matchPasswordInvalid';\n  }\n\n  return '';\n};\n\nconst validateField = (field: string, value: string) => {\n  if (value) return '';\n  let fieldRequire = '';\n  switch (field) {\n    case 'name':\n      fieldRequire = 'nameRequire';\n      break;\n\n    case 'gender':\n      fieldRequire = 'genderRequire';\n      break;\n\n    case 'region':\n      fieldRequire = 'regionRequire';\n      break;\n\n    case 'state':\n      fieldRequire = 'stateRequire';\n      break;\n  }\n\n  return fieldRequire;\n};\n\nexport const validateLogin = (values: ILoginParams): ILoginValidation => {\n  return {\n    username: validateEmail(values.username),\n    password: validatePassword(values.password),\n    factory: validateFactory(Number(values.company_id)),\n  };\n};\n\nexport const validLogin = (values: ILoginValidation) => {\n  return !values.username && !values.password;\n};\n\nexport const validateSignUp = (values: ISignUpParams): ISignUpValidation => {\n  return {\n    email: validateEmail(values.email),\n    password: validatePassword(values.password),\n    repeatPassword: validateRepeatPassword(values.password, values.repeatPassword),\n    name: validateField('name', values.name),\n    gender: validateField('gender', values.gender),\n    region: validateField('region', values.region),\n    state: validateField('state', values.state),\n  };\n};\n\nexport const validSignUp = (values: ISignUpValidation) => {\n  return (\n    !values.email &&\n    !values.password &&\n    !values.repeatPassword &&\n    !values.name &&\n    !values.gender &&\n    !values.region &&\n    !values.state\n  );\n};\n\nconst validateFieldAddEmployee = (field: string, value?: string) => {\n  if (value) return '';\n  let fieldRequire = '';\n  switch (field) {\n    case 'gender':\n      fieldRequire = 'genderRequire';\n      break;\n    case 'ktp':\n      fieldRequire = 'ktpRequire';\n      break;\n    case 'nc_id':\n      fieldRequire = 'ncIdRequire';\n      break;\n    case 'type':\n      fieldRequire = 'type';\n      break;\n  }\n  return fieldRequire;\n};\n\nconst validateName = (name: string) => {\n  if (!name) {\n    return 'nameRequire';\n  }\n  if (name.length > 50) {\n    return 'maxximumValid50';\n  }\n  return '';\n};\n\nconst validateGender = (gender: any) => {\n  if (gender === '') {\n    return 'genderRequire';\n  }\n};\n\nconst validateKtp = (ktp_no: any) => {\n  if (!ktp_no) {\n    return 'ktpRequire';\n  }\n  if (ktp_no.length > 20) {\n    return 'maxximumValid20';\n  }\n  return '';\n};\n\nconst validateNcId = (ncId: any) => {\n  if (!ncId) {\n    return 'ncIdRequire';\n  }\n  if (ncId.length > 20) {\n    return 'maxximumValid20';\n  }\n  return '';\n};\n\nconst validateFieldMother = (mother_name: string) => {\n  if (mother_name && mother_name.length > 50) {\n    return 'maxximumValid50';\n  }\n  return '';\n};\n\nconst validateFieldPob = (pob: string) => {\n  if (pob && pob.length > 50) {\n    return 'maxximumValid50';\n  }\n  return '';\n};\n\nconst validateFieldAddress1 = (home_address_1: string) => {\n  if (home_address_1 && home_address_1.length > 100) {\n    return 'maxximumValid100';\n  }\n  return '';\n};\n\nconst validateFieldAddress2 = (home_address_2: string) => {\n  if (home_address_2 && home_address_2.length > 100) {\n    return 'maxximumValid100';\n  }\n  return '';\n};\n\nconst validateFieldMobileNo = (mobile_no: string) => {\n  if (mobile_no && mobile_no.length > 20) {\n    return 'maxximumValid20';\n  }\n  return '';\n};\n\nconst validateFieldTelNo = (tel_no: string) => {\n  if (tel_no && tel_no.length > 20) {\n    return 'maxximumValid20';\n  }\n  return '';\n};\n\nconst validateFieldBankCardNo = (card_number: string) => {\n  if (card_number && card_number.length > 30) {\n    return 'maxximumValid30';\n  }\n  return '';\n};\n\nconst validateFieldBankAccountNo = (bank_account_no: string) => {\n  if (bank_account_no && bank_account_no.length > 30) {\n    return 'maxximumValid30';\n  }\n  return '';\n};\n\nconst validateFieldBankName = (bank_name: string) => {\n  if (bank_name && bank_name.length > 100) {\n    return 'maxximumValid100';\n  }\n  return '';\n};\n\nconst validateFieldFamilyCardName = (family_card_number: string) => {\n  if (family_card_number && family_card_number.length > 30) {\n    return 'maxximumValid30';\n  }\n  return '';\n};\n\nconst validateFieldSafetyInsuranceNo = (safety_insurance_no: string) => {\n  if (safety_insurance_no && safety_insurance_no.length > 30) {\n    return 'maxximumValid30';\n  }\n  return '';\n};\n\nconst validateFieldHealthInsuranceNo = (health_insurance_no: string) => {\n  if (health_insurance_no && health_insurance_no.length > 30) {\n    return 'maxximumValid30';\n  }\n  return '';\n};\n\nexport const validateAddEmployee = (values: EmployeeParams): EmployeeValidate => {\n  return {\n    name: validateName(values.name),\n    gender: validateGender(values.gender),\n    mother_name: validateFieldMother(values.mother_name),\n    pob: validateFieldPob(values.pob),\n    ktp_no: validateKtp(values.ktp_no),\n    nc_id: validateNcId(values.nc_id),\n    home_address_1: validateFieldAddress1(values.home_address_1),\n    home_address_2: validateFieldAddress2(values.home_address_2),\n    mobile_no: validateFieldMobileNo(values.mobile_no),\n    tel_no: validateFieldTelNo(values.tel_no),\n    bank_account_no: validateFieldBankAccountNo(values.bank_account_no),\n    card_number: validateFieldBankCardNo(values.card_number),\n    bank_name: validateFieldBankName(values.bank_name),\n    family_card_number: validateFieldFamilyCardName(values.family_card_number),\n    safety_insurance_no: validateFieldSafetyInsuranceNo(values.safety_insurance_no),\n    health_insurance_no: validateFieldHealthInsuranceNo(values.safety_insurance_no),\n    type: validateFieldAddEmployee('type', values.type),\n  };\n};\n\nexport const validAddEmployee = (values: EmployeeValidate) => {\n  return (\n    !values.gender &&\n    !values.mother_name &&\n    !values.pob &&\n    !values.ktp_no &&\n    !values.name &&\n    !values.nc_id &&\n    !values.home_address_1 &&\n    !values.home_address_2 &&\n    !values.mobile_no &&\n    !values.tel_no &&\n    !values.bank_account_no &&\n    !values.card_number &&\n    !values.bank_name &&\n    !values.family_card_number &&\n    !values.safety_insurance_no &&\n    !values.health_insurance_no &&\n    !values.type\n  );\n};\n"]},"metadata":{},"sourceType":"module"}